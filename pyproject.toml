# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# https://peps.python.org/pep-0621/
[project]
name = "microvis"
description = "package description."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD 3-Clause License" }
authors = [{ email = "talley.lambert@gmail.com", name = "Talley Lambert" }]
dynamic = ["version"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
    "Typing :: Typed",
]
dependencies = [
    "numpy",
    "psygnal[proxy]",
    "pydantic<2",
    "loguru",
    "imageio",
    "magicgui",
]

# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
vispy = ["vispy", "pyopengl", "jupyter-rfb", "ipywidgets<8.0"]
test = ["pytest>=6.0", "pytest-cov"]
test-qt = ["pytest-qt"]
dev = [
    "black",
    "ipython",
    "isort",
    "mypy",
    "pdbpp",
    "pre-commit",
    "pytest-cov",
    "pytest",
    "rich",
    "ruff",
    "hatch",
]
pyqt5 = ["pyqt5"]
pyqt6 = ["pyqt6"]
pyside2 = ["pyside2"]
pyside6 = ["pyside6"]
docs = [
    "griffe",
    "mkdocs-material",
    "mkdocs-minify-plugin",
    "mkdocs>=1.4.0",
    "mkdocstrings-python",
    "mkdocstrings",
    "typing_extensions",
]

[project.urls]
homepage = "https://github.com/tlambert03/microvis"
repository = "https://github.com/tlambert03/microvis"

[tool.hatch.envs.test]
dependencies = ["pytest", "pytest-cov"]
scripts = { cov = "pytest {args}" }

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]
backend = ["None", "vispy"]
qt = ["None", "pyside2", "pyqt5", "pyqt6", "pyside6"]

[tool.hatch.envs.test.overrides]
matrix.backend.features = [{ value = "vispy", if = ["vispy"] }]
matrix.qt.features = [
    { value = "test-qt", if = [
        "pyside2",
        "pyqt5",
        "pyqt6",
        "pyside6",
    ] },
]

matrix.qt.dependencies = [
    { value = "pyside2", if = [
        "pyside2",
    ] },
    { value = "pyqt5", if = [
        "pyqt5",
    ] },
    { value = "pyqt6", if = [
        "pyqt6",
    ] },
    { value = "pyside6", if = [
        "pyside6",
    ] },
]


# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src", "tests"]
select = [
    "F",    # pyflakes
    "W",    # pyflakes
    "E",    # style errors
    "D",    # pydocstyle
    "I",    # isort
    "UP",   # pyupgrade
    "S",    # bandit
    "C4",   # flake8-comprehensions
    "B",    # bugbear
    "A001", # Variable shadowing a python builtin
    "RUF",  # ruff-specific rules
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "TID",  # flake8-tidy-imports
    "TCH",  # type-check
    "T20",  # flake8-print
    "RET",  # flake8-return
]
ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
    "ANN1", # Missing type annotation for self/cls
    "ANN4", # disallow Any as an argument type
]
unfixable = ["T20"] # don't fix prints
exclude = ["notes/**/*"]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D1", "S101", "ANN"]
"examples/*.py" = ["D1", "ANN", "T20"]
"src/**/*.py" = ["D1"]                 # FIXME

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true
ignore_missing_imports = true
plugins = ['pydantic.mypy']


# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-v", "--color=yes"]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:distutils Version classes are deprecated:",
    "ignore:GPUs can't support floating point data with more than 32-bits:",
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "return NotImplemented",
]
show-missing = true
[tool.coverage.run]
source = ["microvis"]


# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    "tests/**/*",
    "mkdocs.yml",
    "docs/**/*",
    "examples/**/*",
    "notes/**/*",
    ".ruff_cache/**/*",
]

[tool.pyright]
include = ['src']
